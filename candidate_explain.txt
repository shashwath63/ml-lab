1. get_domains(examples)
python

def get_domains(examples):
    d = [set() for i in examples[0]]

    for x in examples:
        for i, xi in enumerate(x):
            d[i].add(xi)

    return [list(sorted(x)) for x in d]
d = [set() for i in examples[0]]: Create a list d where each element is an empty set. The length of this list is determined by the number of attributes in the first example.

for x in examples:: Iterate through each example in the dataset.

for i, xi in enumerate(x):: Iterate through each attribute xi of the current example x along with its index i.

d[i].add(xi): Add the value of the attribute xi to the corresponding set in the list d.

return [list(sorted(x)) for x in d]: Return a list of lists where each sublist contains unique values for the corresponding attribute. The values are sorted.

2. more_general(h1, h2)
python
Copy code
def more_general(h1, h2):
    more_general_parts = []
    for x, y in zip(h1, h2):
        mg = x == "?" or (x != "0" and (x == y or y == "0"))
        more_general_parts.append(mg)

    return all(more_general_parts)
more_general_parts = []: Initialize an empty list to store boolean values.

for x, y in zip(h1, h2):: Iterate through corresponding elements of hypotheses h1 and h2.

mg = x == "?" or (x != "0" and (x == y or y == "0")): Determine if the corresponding elements satisfy the condition for being more general.

more_general_parts.append(mg): Add the result to the list.

return all(more_general_parts): Return True if all elements in the list are True, indicating that h1 is more general than h2.

3. fulfills(example, hypothesis)
python
Copy code
def fulfills(example, hypothesis):
    return more_general(hypothesis, example)
return more_general(hypothesis, example): Call more_general to check if the hypothesis hypothesis is more general than the example example.
4. min_generalizations(h, x)
python
Copy code
def min_generalizations(h, x):
    h_new = list(h)
    for i in range(len(h)):
        if not fulfills(x[i:i+1], h[i:i+1]):
            h_new[i] = '?' if h[i] != '0' else x[i]

    return [tuple(h_new)]
h_new = list(h): Create a copy of the hypothesis h as a list.

for i in range(len(h)):: Iterate through each element of the hypothesis.

if not fulfills(x[i:i+1], h[i:i+1]):: Check if the corresponding elements of the example and hypothesis satisfy the condition for fulfillment.

h_new[i] = '?' if h[i] != '0' else x[i]: Update the element in h_new with '?' if the hypothesis has a more specific value ('0') and the example has a different value.

return [tuple(h_new)]: Return a list containing the minimal generalization of the hypothesis.

5. min_specializations(h, domains, x)
python
Copy code
def min_specializations(h, domains, x):
    results = []
    for i in range(len(h)):
        if h[i] == "?":
            for val in domains[i]:
                if x[i] != val:
                    h_new = h[:i] + (val,) + h[i+1:]
                    results.append(h_new)
        elif h[i] != "0":
            h_new = h[:i] + ('0',) + h[i+1:]
            results.append(h_new)

    return results
results = []: Initialize an empty list to store the minimal specializations.

for i in range(len(h)):: Iterate through each element of the hypothesis.

if h[i] == "?":: Check if the element in the hypothesis is a placeholder ('?').

for val in domains[i]:: Iterate through the possible values of the attribute.

if x[i] != val:: Check if the example has a different value than the current attribute value.

h_new = h[:i] + (val,) + h[i+1:]: Create a new hypothesis by replacing the placeholder with the attribute value.

results.append(h_new): Add the new hypothesis to the list of results.

elif h[i] != "0":: Check if the element in the hypothesis is not a specific value ('0').

h_new = h[:i] + ('0',) + h[i+1:]: Create a new hypothesis by replacing the specific value with a placeholder.

results.append(h_new): Add the new hypothesis to the list of results.

return results: Return a list containing the minimal specializations of the hypothesis.

6. generalize_S(x, G, S)
python
Copy code
def generalize_S(x, G, S):
    S_prev = list(S)
    for s in S_prev:
        if s not in S:
            continue
        if not fulfills(x, s):
            S.remove(s)
            Splus = min_generalizations(s, x)
            S.update([h for h in Splus if any([more_general(g, h) for g in G])])

    S.difference_update([h for h in S if any([more_general(h, h1) for h1 in S if h != h1])])

    return S
S_prev = list(S): Create a copy of the set of specific hypotheses.

for s in S_prev:: Iterate through each specific hypothesis.

if s not in S:: Skip the iteration if the hypothesis is no longer in the set of specific hypotheses.

if not fulfills(x, s):: Check if the example does not fulfill the specific hypothesis.

S.remove(s): Remove the specific hypothesis from the set.

Splus = min_generalizations(s, x): Find the minimal generalizations of the specific hypothesis with respect to the example.

S.update([h for h in Splus if any([more_general(g, h) for g in G])]): Update the set of specific hypotheses with the minimal generalizations that have a counterpart in the set of general hypotheses.

S.difference_update([h for h in S if any([more_general(h, h1) for h1 in S if h != h1])]): Remove hypotheses from the set of specific hypotheses if they are less specific than any other hypothesis in the set.

return S: Return the updated set of specific hypotheses.

7. specialize_G(x, domains, G, S)
python
Copy code
def specialize_G(x, domains, G, S):
    G_prev = list(G)
    for g in G_prev:
        if g not in G:
            continue
        if fulfills(x, g):
            G.remove(g)
            Gminus = min_specializations(g, domains, x)
            G.update([h for h in Gminus if any([more_general(h, s) for s in S])])
            G.difference_update([h for h in G if any([more_general(g1, h) for g1 in G if h != g1])])

    return G
G_prev = list(G): Create a copy of the set of general hypotheses.

for g in G_prev:: Iterate through each general hypothesis.

if g not in G:: Skip the iteration if the hypothesis is no longer in the set of general hypotheses.

if fulfills(x, g):: Check if the example fulfills the general hypothesis.

G.remove(g): Remove the general hypothesis from the set.

Gminus = min_specializations(g, domains, x): Find the minimal specializations of the general hypothesis with respect to the example.

G.update([h for h in Gminus if any([more_general(h, s) for s in S])]): Update the set of general hypotheses with the minimal specializations that have a counterpart in the set of specific hypotheses.

G.difference_update([h for h in G if any([more_general(g1, h) for g1 in G if h != g1])]): Remove hypotheses from the set of general hypotheses if they are less general than any other hypothesis in the set.

return G: Return the updated set of general hypotheses.

8. candidate_elimination(examples)
python
Copy code
def candidate_elimination(examples):
    domains = get_domains(examples)[:-1]  # excluding the last column
    n = len(domains)
    G = set([("?",)*n])
    S = set([("0",)*n])
    print("Maximally specific hypotheses - S ")
    print("Maximally general hypotheses - G ")
    i = 0
    print("\nS[0]:", str(S), "\nG[0]:", str(G))

    for xcx in examples:
        i = i + 1
        x, cx = xcx[:-1], xcx[-1]
        if cx == 'Y':  # x is a positive example
            G = {g for g in G if fulfills(x, g)}
            S = generalize_S(x, G, S)
        else:
            S = {s for s in S if not fulfills(x, s)}
            G = specialize_G(x, domains, G, S)

        print("\nS[{0}]:".format(i), S)
        print("G[{0}]:".format(i), G)

    return
domains = get_domains(examples)[:-1]: Get the domains of attributes, excluding the last column (the target variable).

n = len(domains): Determine the number of attributes.

G = set([("?",)*n]): Initialize the set of general hypotheses with the most general hypothesis.

S = set([("0",)*n]): Initialize the set of specific hypotheses with the most specific hypothesis.

print("Maximally specific hypotheses - S "): Print a header indicating the set of specific hypotheses.

print("Maximally general hypotheses - G "): Print a header indicating the set of general hypotheses.

i = 0: Initialize a counter for the iteration over examples.

print("\nS[0]:", str(S), "\nG[0]:", str(G)): Print the initial sets of specific and general hypotheses.

for xcx in examples:: Iterate through each example in the dataset.

i = i + 1: Increment the counter for the iteration.

x, cx = xcx[:-1], xcx[-1]: Split the example into attributes (x) and the target variable (cx).

if cx == 'Y':: Check if the example is positive.

G = {g for g in G if fulfills(x, g)}: Update the set of general hypotheses by keeping only those that are consistent with the positive example.
S = generalize_S(x, G, S): Generalize the specific hypotheses based on the positive example.
else:: If the example is negative.

S = {s for s in S if not fulfills(x, s)}: Update the set of specific hypotheses by removing those that are consistent with the negative example.
G = specialize_G(x, domains, G, S): Specialize the general hypotheses based on the negative example.
print("\nS[{0}]:".format(i), S): Print the updated set of specific hypotheses.

print("G[{0}]:".format(i), G): Print the updated set of general hypotheses.

return: The function does not explicitly return anything, but it prints the intermediate results during the execution of the candidate elimination algorithm.